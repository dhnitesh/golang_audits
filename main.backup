package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Configuration constants
const (
	mongoURI       = "mongodb://localhost:27017"
	dbName         = "golang_data"
	collectionName = "wecareit_audit_logs"
)

// Global variables
var (
	mongoClient *mongo.Client
	collection  *mongo.Collection
)

var data struct {
	Created   time.Time `json:"created"`
	User      string    `json:"user"`
	RawUserID int       `json:"raw_user_id"`
	Username  string    `json:"username"`
	IP        string    `json:"ip"`
	Host      string    `json:"host"`
	Path      string    `json:"path"`
	UserAgent string    `json:"user_agent"`
	UUID      string    `json:"uuid"`
	ExitTime  time.Time `json:"exit_time"`
	GeoData   struct {
		Latitude  float64 `json:"latitude"`
		Longitude float64 `json:"longitude"`
	} `json:"geo_data"`
}

// connectMongoDB establishes connection with MongoDB
func connectMongoDB() error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	clientOptions := options.Client().ApplyURI(mongoURI)
	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		return fmt.Errorf("failed to connect to MongoDB: %v", err)
	}

	// Ping the database to verify connection
	err = client.Ping(ctx, nil)
	if err != nil {
		return fmt.Errorf("failed to ping MongoDB: %v", err)
	}

	mongoClient = client
	collection = client.Database(dbName).Collection(collectionName)
	return nil
}

// saveToMongo saves data to MongoDB
func saveToMongo(data interface{}) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	_, err := collection.InsertOne(ctx, data)
	if err != nil {
		return fmt.Errorf("failed to insert data to MongoDB: %v", err)
	}

	return nil
}

// main function
func main() {
	err := connectMongoDB()

	if err != nil {

		log.Fatalf("failed to connect to MongoDB: %v", err)
	}
	r := gin.Default()
	r.Use(cors.Default())

	r.POST("/data", func(c *gin.Context) {
		fmt.Println("Data received")
		err := c.BindJSON(&data)
		if err != nil {
			c.JSON(400, gin.H{"error": "failed to bind JSON"})
			return
		}

		err = saveToMongo(data)
		if err != nil {
			c.JSON(500, gin.H{"error": "failed to save data"})
			return
		}

		c.JSON(200, gin.H{"message": "data saved successfully"})
	})
	startServer(r)

}

func startServer(r *gin.Engine) {
	log.Println("Server is running on port 8080")
	log.Fatal(r.Run(":8080"))
}
